[build-system]
requires = ["setuptools>=40.8.0", "wheel", "oldest-supported-numpy", "scipy>=0.13.2"]
build-backend = "setuptools.build_meta"

[tool.cibuildwheel]
build = "cp38-*"
skip = "*-win32 *-manylinux_i686 *-musllinux_*"

# Tests require our pybind11-enabled osqp to be installed
# This entry can go away once the install_requires of osqp-mkl requires osqp>=something
test-requires = ["pytest", "git+git://github.com/osqp/osqp-python.git@vb/pybind11", "mkl"]

# During testing, the OSQP_ALGEBRA envvar is not strictly required since OSQP will pick up the "best" algebra available;
# but we can force the usage of a particular algebra by specifying this.

[tool.cibuildwheel.linux]
environment = { OSQP_ALGEBRA="mkl", MKL_ROOT="/opt/intel/oneapi/mkl/latest" }
before-all = ".github/workflows/prepare_build_environment_linux_mkl.sh"
test-command = "OSQP_ALGEBRA=mkl LD_PRELOAD=$(dirname `which python`)/../lib/libmkl_core.so.2:$(dirname `which python`)/../lib/libmkl_sequential.so.2 pytest -s $(python -c \"import osqp; print(osqp.__path__[0])\")/tests"

[tool.cibuildwheel.macos]
environment = { OSQP_ALGEBRA="mkl", MKL_ROOT="/opt/intel/oneapi/mkl/latest" }
before-all = ".github/workflows/prepare_build_environment_macos_mkl.sh"

[tool.cibuildwheel.windows]
environment = { OSQP_ALGEBRA="mkl", MKL_ROOT="C:/Program Files (x86)/Intel/oneAPI/mkl/latest", MKL_DIR="C:/Program Files (x86)/Intel/oneAPI/mkl/latest/lib/cmake/mkl" }
before-all = "bash .github/workflows/prepare_build_environment_windows_mkl.sh"
#test-command = "pytest -s $(python -c \"import osqp; print(osqp.__path__[0])\")/tests"
test-command = "bash -c \"pytest -s $(python -c 'import osqp; print(osqp.__path__[0])')/tests\""
